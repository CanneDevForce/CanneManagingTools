// Par défaut, on commence avec 11 joueursvar nbj = 11;var MAX_PLAYERS = 11;$(function(){	// Affiche une infobulle	function showInfobulle(texte, titre, posTop, posLeft) {		$('#texte-infobulle').text(texte);		$('#titre-infobulle').text(titre);		$('#infobulle').css({left:posLeft, top:posTop}).show();	}		// Masque une infobulle	function hideInfobulle() {		$('#infobulle').hide();	}		// Met en surbrillance deux cases ([i,j] et [j,i])	function surbrillance(i, j, on) {		if (on) {			$('#'+i+'-'+j).removeClass('case-blanche').addClass('case-bleue');			$('#'+j+'-'+i).removeClass('case-blanche').addClass('case-bleue');				} else {			$('#'+i+'-'+j).removeClass('case-bleue').addClass('case-blanche');			$('#'+j+'-'+i).removeClass('case-bleue').addClass('case-blanche');		}	}		// Définit le nom d'un joueur dont l'id est passé en paramètre	function setPlayerName(id, name) {		$(id).attr('modified', 'true').text(name);	}		// Enregistre le résultat de la rencontre i contre j	function setRencontre(i, j, score_i, score_j) {		$('#'+i+'-'+j).text(score_i).attr('modified','true');		$('#'+j+'-'+i).text(score_j).attr('modified','true');				// Pour indiquer sur le bouton résultat que le match a été effectué,		// il faut d'abord être certain que i<j car l'id des rencontres est toujours		// "i-j", avec i<j.		if (i > j) {			// le cas échéant, permutation			var temp = i;			i = j;			j = temp;		}		$('#match-'+i+'-'+j).removeClass('fond-gris').addClass('fond-vert');							}		// Cette fonction recalcule les scores de tous les joueurs VISIBLES	function calculeScores() {		for (var i=1; i<=nbj; i++) {			calculeLigne(i);		}		calculePlaces();	}		// Calcule et affiche à la bonne place la ligne lig	function calculeLigne(lig) {		var pv = 0;		var td = 0;		var tr = 0;		var ga = 0;		for (var i=1; i<=nbj; i++) {			if (i == lig) continue;			var scoreTireurString = $('#'+lig+'-'+i).text();			var scoreAdversaireString = parseInt($('#'+i+'-'+lig).text());						if (isNaN(scoreTireurString) || isNaN(scoreAdversaireString)) continue;						var scoreTireur = parseInt(scoreTireurString);			var scoreAdversaire = parseInt(scoreAdversaireString);						if(scoreTireur > scoreAdversaire) {				pv += 3; // victoire			} else if(scoreTireur < scoreAdversaire) {				pv += 1; // défaite			} else {				pv += 2; // match nul			}			td += scoreTireur;			tr += scoreAdversaire;		}		ga = td - tr;		$('#pv-'+lig).text(''+pv);		$('#td-'+lig).text(''+td);		$('#tr-'+lig).text(''+tr);		$('#ga-'+lig).text(''+ga);	}		// Calcule les places de toutes les lignes du tableau en fonction :	// - du nombre de points de victoires	function calculePlaces() {		// 1) récupération des valeurs à trier		var tab = {			pv : [],			ga : [],			lig : []		};		for (var i=0; i<nbj; i++) {			tab.pv[i] = parseInt($('#pv-'+(i+1)).text());			tab.ga[i] = parseInt($('#ga-'+(i+1)).text());			tab.lig[i] = i+1;		}		// 2) Tri des valeurs du tableau		tri(tab);				// 3) Une fois le tableau trié, on repasse dans une boucle pour attribuer à chaque ligne sa place		for (var i=0; i<nbj; i++) {			var ancienneClasse = $('#p-'+tab.lig[i]).attr('old-class');			var nouvelleClasse = 'place-'+(i+1);			$('#p-'+tab.lig[i]).removeClass(ancienneClasse)							   .addClass(nouvelleClasse)							   .attr('old-class',nouvelleClasse)							   .text(''+(i+1));			$('#classement-place-'+(i+1)).text($('#nom-joueur-'+tab.lig[i]).text());		}			}			// Fonction de tri (simple)	function tri(tab) {		var len = tab.pv.length;		for(var i= 0 ; i< len; i++){ 		// le tableau est trié de 0 à i-1		// La boucle interne recherche le maximum  		// de i+1 à la fin du tableau. 			for(var j=i+1; j< len; j++){				if(tab.pv[j] > tab.pv[i] || ( (tab.pv[j] == tab.pv[i]) && (tab.ga[j] > tab.ga[i]) ) ){					// tri des PV					var temp = tab.pv[j];					tab.pv[j]=tab.pv[i];					tab.pv[i]=temp;										// En même temps, on déplace de même la position					temp = tab.lig[j];					tab.lig[j]=tab.lig[i];					tab.lig[i]=temp;					// Et le goal average					temp = tab.ga[j];					tab.ga[j]=tab.ga[i];					tab.ga[i]=temp;				}			}		}		return tab;	}		// Modifie la fenêtre popup de rencontres entre i et j	function openPopupRencontre(i, j) {		$('#j1').text(''+i);		$('#j2').text(''+j);		$('#res-j1').attr('placeholder', 'Score '+i).val($('#'+i+'-'+j).text());		$('#res-j2').attr('placeholder', 'Score '+j).val($('#'+j+'-'+i).text());		$('#resultats').attr('i', i).attr('j', j).show();		$('#res-j1').focus();		}			// Sauvegarde des données	function save() {		// Détection		if(typeof localStorage != 'undefined') {			// Indication qu'une sauvegarde pour PEWL existe			localStorage.setItem('pewl_save',true);						// Enregistrement du nombre courant de joueurs			localStorage.setItem('pewl_nbjoueurs',nbj); 						// Enregistrement des noms des joueurs (les 11, au cas-où). "pewl_nomsjoueurs : i1:nomjoueuri1|i2:nomjoueuri2|i3:nomjoueuri3"			var nomsJoueurs = "";			var premier = true;			// On ne sauvegarde que les joueurs qui ont changé de nom			$('.nom-joueur[modified=true]').each(function(index){				var idJoueur = this.id.split('-');				var id = idJoueur[idJoueur.length-1];								// Si un nom de joueur contient ':' ou '|', on remplace				var reg = new RegExp("[:|]", "g");				var nom = $(this).text().replace(reg,'-');				if (premier) {					premier = false;				} else {					nomsJoueurs += "|";				}				nomsJoueurs += id + ":" + nom;							});			localStorage.setItem('pewl_nomsjoueurs',nomsJoueurs); 						// Enregistement des scores (les 11 aussi, toujours au cas-où) "pewl_score : i1:j1:scorei1:scorej1|i2:j2:scorei2:scorej2|i3:j3:scorei3:scorej3"			var scores = "";			// Réinitialisation			premier = true;			// On ne sauvegarde que les cases qui ont reçu un score (elles ont reçu l'attribut "modified:true")			$('.case-tab[modified=true]').each(function(index){				var id = this.id.split('-');				var i = parseInt(id[0]);				var j = parseInt(id[1]);				// Pour ne pas sauvegarder les données deux fois, on ne considère que le cas où i < j. Quand arrive j < i, la sauvegarde aura déjà été faite ou sera prochainement faite.				if (i < j) {					// Par sécurité, on remplace les caractères que l'on va utiliser par des '-'					var reg = new RegExp("[:|]", "g");					var val_i = $(this).text().replace(reg,'-');					var val_j = $('#'+j+'-'+i).text().replace(reg,'-');										if (!premier) {						scores += "|";					} else {						premier = false;					}					scores += "" + i + ":" + j + ":" + val_i + ":" + val_j;				}			});			localStorage.setItem('pewl_scores',scores); 							  		} else {		  alert("LocalStorage n'est pas supporté. Aucune sauvegarde ne sera possible.");		}	}		// Chargement des données	function load() {			if(typeof localStorage != 'undefined') {					// Vérification qu'une sauvegarde existe (si elle a été supprimée, on s'arrête là)			if (localStorage.getItem('pewl_save') != null) {							// Chargement des noms des joueurs. "pewl_nomsjoueurs : 1-nomjoueur|2-nomjoueur|3-nomjoueur"				var nomsJoueurs = localStorage.getItem('pewl_nomsjoueurs');				var tabNoms = nomsJoueurs.split('|');				for (var i=0; i<tabNoms.length; i++) {					var unJoueur = tabNoms[i].split(':');					setPlayerName('#nom-joueur-'+unJoueur[0], unJoueur[1]);				}								// Chargement des scores "pewl_score : i1:j1:scorei1:scorej1|i2:j2:scorei2:scorej2|i3:j3:scorei3:scorej3"				var scores = localStorage.getItem('pewl_scores');				var tabScores = scores.split('|');				for (var i=0; i<tabScores.length; i++) {					var unScore = tabScores[i].split(':');					setRencontre(parseInt(unScore[0]), parseInt(unScore[1]), unScore[2], unScore[3]);				}								// Chargement du nombre de joueurs en récupérant la valeur et en déclenchant l'événement "clic sur le bouton 'N joueurs'"				var nbJoueurs = localStorage.getItem('pewl_nbjoueurs'); 				$('#btn-choix-nb-joueurs-'+nbJoueurs).click();											}				} else {					$('#alerte').show();		  		}	}		// Permet de sauvegarder vers un fichier	function saveToFile() { 		var content = "";		var premiereligne = " ;Nom;";		for (var i=1; i<=nbj; i++) {			premiereligne += "" + i + ";"			content += i + ";" + $('#nom-joueur-'+i).text() + ";";			for (var j=1; j<=nbj; j++) {				if (i == j) {					content += '#;';				} else {					content += $('#'+i+'-'+j).text() + ';';				}			}			content += $('#pv-'+i).text() + ';' + $('#td-'+i).text() + ';' + $('#tr-'+i).text() + ';' + $('#ga-'+i).text() + ';' + $('#p-'+i).text() + ';\n';		}		premiereligne += "PV;TD;TR;GA;P;\n";						var uriContent = "data:application/csv;charset=utf-8," + encodeURIComponent(premiereligne + content);		var d = new Date();		var m = d.getMonth() + 1;		if (m < 10)			m = "0" + m;		var j = d.getDate();		if (j < 10)			j = "0" + j;		$('#exporter-table').attr('download', "" + d.getFullYear() + "." + m + "." + j +" - pewl.csv");		$('#exporter-table').attr('href', uriContent); 	}		// Nettoie le localStorage de ce que l'on a pu y sauvegarder	function clearStorage() {		localStorage.removeItem('pewl_save');		localStorage.removeItem('pewl_nomsjoueurs');		localStorage.removeItem('pewl_scores');		localStorage.removeItem('pewl_nbjoueurs');	}		// ------------------------------------------------------------------------------------------------------------------------	// 														EVENEMENTS	// ------------------------------------------------------------------------------------------------------------------------	// Lorsque l'on clique sur le bouton de fermeture de l'alerte	$('#close-alerte').click(function() {		$('#alerte').fadeOut();		return false;	});		// Lorsque l'on clique sur le bouton de nettoyage de la table	$('#clear-table').click(function() {		clearStorage();	});	// Lorsque l'on passe le curseur par-dessus un élément qui possède une infobulle (cellule du titre)	$(".cell-titre").hover(function () { 			var posTop = $(this).offset().top + $(this).height();			var posLeft = $(this).offset().left - $('#infobulle').width()/2 + $(this).width()/2;			showInfobulle($(this).attr('texte'), $(this).attr('titre'), posTop, posLeft); 		},		hideInfobulle	);	// Lorsque l'on passe le curseur par-dessus un élément qui possède une infobulle (boutons d'action)	$(".btn-action").hover(function () { 			var posTop = $(this).offset().top + $(this).height() + 4;			var posLeft = $(this).offset().left - $('#infobulle').width()/2 + $(this).width()/2;			showInfobulle($(this).attr('texte'), $(this).attr('titre'), posTop, posLeft); 		},		hideInfobulle	);		// Lorsque l'on clique sur un bouton de nombre de joueurs	$('.btn-choix-nb-joueurs').click(function() {			// Suppression de la classe "bouton courant"		$('.btn-actif').removeClass('btn-actif').addClass('btn-inactif');		$('#'+this.id).removeClass('btn-inactif').addClass('btn-actif');				// Modification de la table (en conservant ce qui peut être conservé)		// et modification de la liste de rencontres		var num = $('#'+this.id).attr('num');		var numVal = parseInt(num);				for(var $i=1; $i<=numVal; $i++) {			$('.lig-'+$i).show();			$('.col-'+$i).show();			$('.renc-'+$i).show();		}		for(var $i=numVal+1; $i<=MAX_PLAYERS; $i++) {			$('.lig-'+$i).hide();			$('.col-'+$i).hide();			$('.renc-'+$i).hide();		}				// Stockage du nouveau nombre de joueurs		nbj = numVal;				// Re-calcul des résultats (en prenant en compte la nouvelle dimension du tableau)		calculeScores();				// Sauvegarde automatique		save();				// Renvoi de false pour éviter le chargement de la page		return false;			});		// Lorsque l'on clique sur un des noms de joueurs	$('.nom-joueur').click(function(){			var originalText = $(this).text();		$('#login').attr('name', this.id).show();		$('#username').val(originalText).focus();				return false;	});		// Ce qui se passe lorsque l'on clique sur un bouton de rencontre (les rectangles en bas de l'écran)	$('.rencontre').click(function(){		// Récupérer l'id du lien sur lequel le clic s'est fait		var id = this.id;		var split_id = id.split('-');				// Décomposer l'id et en extraire i et j		var i = parseInt(split_id[split_id.length-2]);		var j = parseInt(split_id[split_id.length-1]);				// Modifier la fenêtre popup en fonction et l'afficher		openPopupRencontre(i, j);				return false;	});	// Ce qui se passe lorsque l'on clique sur une des cases de scores du tableau	$(".case-tab").click(function(){		// Récupérer l'id du lien sur lequel le clic s'est fait		var id = this.id;		var split_id = id.split('-');				// Décomposer l'id et en extraire i et j		var i = parseInt(split_id[0]);		var j = parseInt(split_id[1]);				// Modifier la fenêtre popup en fonction et l'afficher		openPopupRencontre(i, j);				return false;	});	// Lorsque l'on valide la fenêtre popup de changement de nom de joueur	$('#loginform').submit(function() {		setPlayerName('#'+$('#login').attr('name'), $('#username').val());				$('#login').fadeOut();				// Sauvegarde des données		save();		return false;	});		$('#btn-close-changename').click(function() {		$('#login').fadeOut();		return false;	});	$('#btn-close-setscore').click(function() {		$('#resultats').fadeOut();		return false;	});		// Lorsque l'on valide le formulaire de scores entre les joueurs i et j	$('#resultatsform').submit(function() {		var i = $('#resultats').attr('i');		var j = $('#resultats').attr('j');				setRencontre(parseInt(i), parseInt(j), $('#res-j1').val(), $('#res-j2').val());				$('#resultats').fadeOut();				// Sauvegarde des données		save();				// Re-calcul des résultats (en prenant en compte les nouvelles entrées)		calculeScores();				return false;	});		// Met en surbrillance les cases du tableau au passage de la souris	$(".case-tab").hover(		function () {			var split_id = this.id.split('-');					// Décomposer l'id et en extraire i et j			var i = split_id[0];			var j = split_id[1];			surbrillance(i, j, true);		},		function () {			var split_id = this.id.split('-');					// Décomposer l'id et en extraire i et j			var i = split_id[0];			var j = split_id[1];			surbrillance(i, j, false);		}	);		// Met en surbrillance les cases du tableau au passage de la souris par-dessus la rencontre correspondante	$('.rencontre').hover(		function() {			var split_id = this.id.split('-');					// Décomposer l'id et en extraire i et j			var i = split_id[1];			var j = split_id[2];			surbrillance(i, j, true);		}, 		function () {			var split_id = this.id.split('-');					// Décomposer l'id et en extraire i et j			var i = split_id[1];			var j = split_id[2];			surbrillance(i, j, false);		}	);		$('#exporter-table').click(function() {		saveToFile();		return true;	});		// Tout à la fin du chargement de la page, on lance un chargement	load();});